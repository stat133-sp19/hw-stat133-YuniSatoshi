#' @export
plot.bindis <- function(table){
library(ggplot2)
ggplot2::ggplot(table, ggplot2::aes(x=success, y = probability))+
ggplot2::geom_bar(stat = "identity", color = "#00A9E0", fill="#00A9E0")+
ggplot2::theme_classic()+ scale_y_continuous(breaks = seq(0, max(table$probability), by = 0.05))+
scale_x_continuous(breaks=(seq(0, max(table[1]), by = 1)))
}
#1.6)Function bin_cumulative()
#' @title binomial cumulative function
#' @description calculates the probability and cumulative probability of different success times
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return A data frame with number of success, probability and cumulative probability
#' @export
#' @examples
#' plot.bincum(bin_cumulative(trials=5, prob=0.5))
bin_cumulative <- function(trials,prob){
bin_dist<-bin_distribution(trials,prob)
cum<-c()
for (i in c(1:length(bin_dist$probability))){
if (i==1){
cum[i]<-bin_dist$probability[i]
} else{
cum[i]<-cum[i-1]+bin_dist$probability[i]
}
}
bin_dist$cumulative<-cum
class(bin_dist)<-c("bincum","data.frame")
return(bin_dist)
}
#' @export
plot.bincum <- function(table){
ggplot(data = table, aes(x= success, y = cumulative)) + geom_line() + geom_point(shape = 1, size = 3) + theme_classic() + scale_y_continuous(breaks = seq(0, 1, by = 0.2))
}
#1.7) Function bin_variable()
#' @title Binomial Random Variable Function
#' @description find summary of variable and its distribution
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return a list with a list of trials and probs
#' @export
#' @examples
#' bin_variable(trials = 5, prob = 0.5)
bin_variable <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
bin_var <- list(trials = trials, prob = prob)
class(bin_var) <- c("binvar")
bin_var
}
#' @export
print.binvar <- function(x) {
cat('"Binomial variable"\n\n')
cat("Parameters\n")
cat("- number of trials:", x$trials, "\n")
cat("- prob of success :", x$prob)
}
#' @export
summary.binvar <- function(x) {
trials <- x$trials
prob <- x$prob
summary_binvar <- list(trials = x$trials,
prob = x$prob,
mean = aux_mean(trials, prob),
variance = aux_variance(trials, prob),
mode = aux_mode(trials, prob),
skewness = aux_skewness(trials, prob),
kurtosis = aux_kurtosis(trials, prob))
class(summary_binvar) <- c("summary.binvar", "list")
summary_binvar
}
#' @export
print.summary.binvar <- function(x) {
cat('"Summary Binomial"\n\n')
cat("Parameters\n")
cat("- number of trials:", x$trials, "\n")
cat("- prob of success :", x$prob, "\n\n")
cat("Measures\n")
cat("- mean    :", x$mean, "\n")
cat("- variance:", x$variance, "\n")
cat("- mode    :", x$mode, "\n")
cat("- skewness:", x$skewness, "\n")
cat("- kurtosis:", x$kurtosis)
}
#1.8) Functions of measures
#' @title Binomial Mean
#' @description Calculates the mean of a binomial variable
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return Expected value of binomial distribution
#' @export
#' @examples
#' bin_mean(trials = 5, prob = 0.5)
bin_mean <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_mean(trials, prob))
}
#' @title Binomial Variance
#' @description Calculates the variance of a binomial variable
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return Return the variance of binomial distribution
#' @export
#' @examples
#' bin_variance(trials = 5, prob = 0.5)
bin_variance <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_variance(trials, prob))
}
#' @title Binomial Mode
#' @description Calculates the mode of a binomial variable
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return Return the mode of binomial distribution
#' @export
#' @examples
#' bin_mode(trials = 5, prob = 0.5)
bin_mode <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_mode(trials, prob))
}
#' @title Binomial Skewness
#' @description Calculates the skewness of a binomial variable
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return Return the skewness of binomial distribution
#' @export
#' @examples
#' bin_skewness(trials = 5, prob = 0.5)
bin_skewness <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_skewness(trials, prob))
}
#' @title Binomial Kurtosis
#' @description Calculates the kurtosis of a binomial variable
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return Return the kurtosis of binomial distribution
#' @export
#' @examples
#' bin_kurtosis(trials = 5, prob = 0.5)
bin_kurtosis <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_kurtosis(trials, prob))
}
#1.3)Function bin_choose()
#' @title binomial choose function
#' @description calculates the number of combinations in which k successes can occur in n trials
#' @param trials number of trials (numeric)
#' @param success number of success (numeric)
#' @return the number of combinations in which k successes can occur in n trials
#' @examples
# bin_choose( 5,  2)
# bin_choose(5,0)
# bin_choose(5,1:3)
#' @export
bin_choose <- function(trials,success){
if(success>trials){
stop("success cannot be greater than n")
}else{
return(factorial(trials)/(factorial(success)*factorial(trials-success)))
}
}
#1.4) Function bin_probability
#' @title Binomial Probability
#' @description Calculates probability given certain number of successes, probability and trials
#' @param trials Number of trials  (numeric)
#' @param success Number of successes (numeric)
#' @param prob Probability of success in one trial (numeric)
#' @return Returns the probability given certain number of successes, probability and trials
#' @export
#' @examples
#' bin_probability(2,  5, 0.5)
#' bin_probability( 0:2,  5, 0.5)
#' bin_probability(55, 100, 0.45)
bin_probability <- function(success, trials, prob){
if(check_trials(trials)!= TRUE){
stop("invalid trials value")
}else if(check_prob(prob) != TRUE){
stop("invalid probability value")
}else if(check_success(success, trials) != TRUE){
stop("invalid success value")
}else{
bin_choose(trials, success)*(prob^(success))*((1-prob)^(trials-success))
}
}
#1.5)Function bin_distribution()
#' @title Binomial Distribution
#' @description Calculates a binomial distribution and form a table
#' @param trials Number of trials (numeric)
#' @param prob Probability of success (numeric)
#' @return A dataframe of binomial distribution
#' @export
#' @examples
#' plot.bindis(bin_distribution(trials = 5, prob = 0.5))
probability <- c()
bin_distribution <- function(trials,prob){
if (check_trials(trials) & check_prob(prob)) {
for (i in c(0:trials)) {
probability[i+1] = bin_probability(i,trials,prob)
}
success <- c(0:trials)
bin_dis <- data.frame(cbind(success,probability))
class(bin_dis) <- c("bindis", "data.frame")
return(bin_dis)
}
}
#' @export
plot.bindis <- function(table){
library(ggplot2)
ggplot2::ggplot(table, ggplot2::aes(x=success, y = probability))+
ggplot2::geom_bar(stat = "identity", color = "#00A9E0", fill="#00A9E0")+
ggplot2::theme_classic()+ scale_y_continuous(breaks = seq(0, max(table$probability), by = 0.05))+
scale_x_continuous(breaks=(seq(0, max(table[1]), by = 1)))
}
#1.6)Function bin_cumulative()
#' @title binomial cumulative function
#' @description calculates the probability and cumulative probability of different success times
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return A data frame with number of success, probability and cumulative probability
#' @export
#' @examples
#' plot.bincum(bin_cumulative(trials=5, prob=0.5))
bin_cumulative <- function(trials,prob){
bin_dist<-bin_distribution(trials,prob)
cum<-c()
for (i in c(1:length(bin_dist$probability))){
if (i==1){
cum[i]<-bin_dist$probability[i]
} else{
cum[i]<-cum[i-1]+bin_dist$probability[i]
}
}
bin_dist$cumulative<-cum
class(bin_dist)<-c("bincum","data.frame")
return(bin_dist)
}
#' @export
plot.bincum <- function(table){
ggplot(data = table, aes(x= success, y = cumulative)) + geom_line() + geom_point(shape = 1, size = 3) + theme_classic() + scale_y_continuous(breaks = seq(0, 1, by = 0.2))
}
#1.7) Function bin_variable()
#' @title Binomial Random Variable Function
#' @description find summary of variable and its distribution
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return a list with a list of trials and probs
#' @export
#' @examples
#' bin_variable(trials = 5, prob = 0.5)
bin_variable <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
bin_var <- list(trials = trials, prob = prob)
class(bin_var) <- c("binvar")
bin_var
}
#' @export
print.binvar <- function(x) {
cat('"Binomial variable"\n\n')
cat("Parameters\n")
cat("- number of trials:", x$trials, "\n")
cat("- prob of success :", x$prob)
}
#' @export
summary.binvar <- function(x) {
trials <- x$trials
prob <- x$prob
summary_binvar <- list(trials = x$trials,
prob = x$prob,
mean = aux_mean(trials, prob),
variance = aux_variance(trials, prob),
mode = aux_mode(trials, prob),
skewness = aux_skewness(trials, prob),
kurtosis = aux_kurtosis(trials, prob))
class(summary_binvar) <- c("summary.binvar", "list")
summary_binvar
}
#' @export
print.summary.binvar <- function(x) {
cat('"Summary Binomial"\n\n')
cat("Parameters\n")
cat("- number of trials:", x$trials, "\n")
cat("- prob of success :", x$prob, "\n\n")
cat("Measures\n")
cat("- mean    :", x$mean, "\n")
cat("- variance:", x$variance, "\n")
cat("- mode    :", x$mode, "\n")
cat("- skewness:", x$skewness, "\n")
cat("- kurtosis:", x$kurtosis)
}
#1.8) Functions of measures
#' @title Binomial Mean
#' @description Calculates the mean of a binomial variable
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return Expected value of binomial distribution
#' @export
#' @examples
#' bin_mean(trials = 5, prob = 0.5)
bin_mean <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_mean(trials, prob))
}
#' @title Binomial Variance
#' @description Calculates the variance of a binomial variable
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return Return the variance of binomial distribution
#' @export
#' @examples
#' bin_variance(trials = 5, prob = 0.5)
bin_variance <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_variance(trials, prob))
}
#' @title Binomial Mode
#' @description Calculates the mode of a binomial variable
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return Return the mode of binomial distribution
#' @export
#' @examples
#' bin_mode(trials = 5, prob = 0.5)
bin_mode <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_mode(trials, prob))
}
#' @title Binomial Skewness
#' @description Calculates the skewness of a binomial variable
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return Return the skewness of binomial distribution
#' @export
#' @examples
#' bin_skewness(trials = 5, prob = 0.5)
bin_skewness <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_skewness(trials, prob))
}
#' @title Binomial Kurtosis
#' @description Calculates the kurtosis of a binomial variable
#' @param n number of trials (numeric)
#' @param p success rate of each trials (numeric)
#' @return Return the kurtosis of binomial distribution
#' @export
#' @examples
#' bin_kurtosis(trials = 5, prob = 0.5)
bin_kurtosis <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_kurtosis(trials, prob))
}
# Title Auxillary Skewness function
# Description: Compute the skewness of the binomial distribution
# Inputs
#   trials: Number of trials in the binomial distribution (numeric)
#   prob: Probability of success in the binomial distribution (numeric)
# Output
#   the skewness of binomial distribution
#examples
#aux_skewness(10, 0.3)
aux_skewness <- function(trials, prob){
skewness = (1-2*prob)/sqrt(trials * prob * (1- prob))
return(skewness)
}
# Title: Auxillary Kurtosis function
# Description: Compute the kurtosis of the binomial distribution
# Inputs
#   trials: Number of trials in the binomial distribution (numeric)
#   prob: Probability of success in the binomial distribution (numeric)
# Output
#   the kurtosis of binomial distribution
#examples
#aux_kurtosis(10, 0.3)
aux_kurtosis <- function(trials, prob){
kurtosis= (1 - 6 * prob * (1-prob) )/(trials * prob * (1-prob))
return(kurtosis)
}
# 1.1) Private Checker Functions
# Function check_prob()
# Title check_prob()
# Description: to test if an input prob is a valid probability value (i.e. 0 ≤ p ≤ 1)
# Inputs
#   prob: probability  (numeric)
# Output
#   whether an input prob is a valid probability value (i.e. 0 ≤ p ≤ 1) or not.
check_prob <- function(prob){
if (prob < 0){
stop('invalid prob value')
}
if (prob > 1){
stop('p has to be a number betwen 0 and 1')
}
else{
return(TRUE)
}
}
# Function check_trials()
# Title check_trials
# Description: to test if an input trials is a valid value for number of trials (i.e. n is a non-negative integer).
# Inputs
#   trials: The trials that we check whether is valid (numeric)
# Output
#   return whether an input trials is a valid value for number of trials (i.e. n is a non-negative integer).
check_trials <- function(trials){
if (trials<0){
stop('invalid trials value')
}
else{
return(TRUE)
}
}
# Function check_success()
# Title check_success()
# Description: to test if an input success is a valid value for number of successes (i.e. 0 ≤ k ≤ n).
# Inputs
#   success: The success value that we check whether is valid (numeric)
#   trials: The trials that we check whether is valid (numeric)
# Output
#   whether an input success is a valid value for number of successes (i.e. 0 ≤ k ≤ n).
check_success <- function(success,trials){
if (success > trials){
stop('success cannot be greater than trials')
}
if (success < 0){
stop("invalid success value")
}
if (trials < 0){
stop("invalid success value")
}
else{
return(TRUE)
}
}
library(binomial)
library(ggplot2)
# For instance
# the number of combinations in which k = 2 successes can occur in n = 5 trials is
bin_choose(5, 2)
# the probability of getting 2 successes in 5 trials, assuming prob of success = 0.5 is
bin_probability(2, 5, 0.5)
# graph a barplot to display the probability histogram of a binomial distribution
dis1 <- bin_distribution(5, 0.5)
plot(dis1)
# return a data frame with both the probability distribution and the cumulative probabilities
bin_cumulative( 5,  0.5)
# graph the cumulative distribution
dis2 <- bin_cumulative(5, 0.5)
plot(dis2)
# nicely print the content of the object "binvar"
bin1 <- bin_variable(10, 0.3)
bin1
# print the contents of an object "summary.binvar"
bin1 <- bin_variable(10, 0.3)
binsum1 <- summary(bin1)
binsum1
# functions of measures
bin_mean(10,0.3)
bin_variance(10, 0.3)
bin_mode(10, 0.3)
bin_skewness(10, 0.3)
bin_kurtosis(10, 0.3)
library(binomial)
library(ggplot2)
# For instance
# the number of combinations in which k = 2 successes can occur in n = 5 trials is
bin_choose(5, 2)
# the probability of getting 2 successes in 5 trials, assuming prob of success = 0.5 is
bin_probability(2, 5, 0.5)
# graph a barplot to display the probability histogram of a binomial distribution
dis1 <- bin_distribution(5, 0.5)
plot(dis1)
library(binomial)
library(ggplot2)
# For instance
# the number of combinations in which k = 2 successes can occur in n = 5 trials is
bin_choose(5, 2)
library(binomial)
library(ggplot2)
# For instance
# the number of combinations in which k = 2 successes can occur in n = 5 trials is
bin_choose(5, 2)
# return a data frame with both the probability distribution and the cumulative probabilities
bin_cumulative( 5,  0.5)
# graph the cumulative distribution
dis2 <- bin_cumulative(5, 0.5)
plot(dis2)
# nicely print the content of the object "binvar"
bin1 <- bin_variable(10, 0.3)
bin1
# print the contents of an object "summary.binvar"
bin1 <- bin_variable(10, 0.3)
binsum1 <- summary(bin1)
binsum1
# functions of measures
bin_mean(10,0.3)
bin_variance(10, 0.3)
bin_mode(10, 0.3)
bin_skewness(10, 0.3)
bin_kurtosis(10, 0.3)
