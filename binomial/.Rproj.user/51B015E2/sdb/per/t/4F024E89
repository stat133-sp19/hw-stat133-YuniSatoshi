{
    "collab_server" : "",
    "contents" : "\n#1.3)Function bin_choose()\n\n#' @title binomial choose function\n#' @description calculates the number of combinations in which k successes can occur in n trials\n#' @param trials number of trials (numeric)\n#' @param success number of success (numeric)\n#' @return the number of combinations in which k successes can occur in n trials\n#' @examples\n# bin_choose( 5,  2)\n# bin_choose(5,0)\n# bin_choose(5,1:3)\n#' @export\nbin_choose <- function(trials,success){\n  if(success>trials){\n    stop(\"success cannot be greater than n\")\n  }else{\n    return(factorial(trials)/(factorial(success)*factorial(trials-success)))\n  }\n}\n\n\n#1.4) Function bin_probability\n\n#' @title Binomial Probability\n#' @description Calculates probability given certain number of successes, probability and trials\n#' @param trials Number of trials  (numeric)\n#' @param success Number of successes (numeric)\n#' @param prob Probability of success in one trial (numeric)\n#' @return Returns the probability given certain number of successes, probability and trials\n#' @export\n#' @examples\n#' bin_probability(2,  5, 0.5)\n#' bin_probability( 0:2,  5, 0.5)\n#' bin_probability(55, 100, 0.45)\nbin_probability <- function(success, trials, prob){\n  if(check_trials(trials)!= TRUE){\n    stop(\"invalid trials value\")\n  }else if(check_prob(prob) != TRUE){\n    stop(\"invalid probability value\")\n  }else if(check_success(success, trials) != TRUE){\n    stop(\"invalid success value\")\n  }else{\n    bin_choose(trials, success)*(prob^(success))*((1-prob)^(trials-success))\n  }\n}\n\n\n\n\n#1.5)Function bin_distribution()\n\n#' @title Binomial Distribution\n#' @description Calculates a binomial distribution and form a table\n#' @param trials Number of trials (numeric)\n#' @param prob Probability of success (numeric)\n#' @return A dataframe of binomial distribution\n#' @export\n#' @examples\n#' plot.bindis(bin_distribution(trials = 5, prob = 0.5))\nprobability <- c()\nbin_distribution <- function(trials,prob){\n  if (check_trials(trials) & check_prob(prob)) {\n    for (i in c(0:trials)) {\n      probability[i+1] = bin_probability(i,trials,prob)\n    }\n    success <- c(0:trials)\n    bin_dis <- data.frame(cbind(success,probability))\n    class(bin_dis) <- c(\"bindis\", \"data.frame\")\n    return(bin_dis)\n  }\n}\n\n#' @export\nplot.bindis <- function(table){\n  library(ggplot2)\n  ggplot2::ggplot(table, ggplot2::aes(x=success, y = probability))+\n    ggplot2::geom_bar(stat = \"identity\", color = \"#00A9E0\", fill=\"#00A9E0\")+\n    ggplot2::theme_classic()+ scale_y_continuous(breaks = seq(0, max(table$probability), by = 0.05))+\n    scale_x_continuous(breaks=(seq(0, max(table[1]), by = 1)))\n}\n\n\n#1.6)Function bin_cumulative()\n\n#' @title binomial cumulative function\n#' @description calculates the probability and cumulative probability of different success times\n#' @param n number of trials (numeric)\n#' @param p success rate of each trials (numeric)\n#' @return A data frame with number of success, probability and cumulative probability\n#' @export\n#' @examples\n#' plot.bincum(bin_cumulative(trials=5, prob=0.5))\nbin_cumulative <- function(trials,prob){\n  bin_dist<-bin_distribution(trials,prob)\n  cum<-c()\n  for (i in c(1:length(bin_dist$probability))){\n    if (i==1){\n      cum[i]<-bin_dist$probability[i]\n    } else{\n      cum[i]<-cum[i-1]+bin_dist$probability[i]\n    }\n  }\n  bin_dist$cumulative<-cum\n  class(bin_dist)<-c(\"bincum\",\"data.frame\")\n  return(bin_dist)\n}\n\n\n#' @export\nplot.bincum <- function(table){\n  ggplot(data = table, aes(x= success, y = cumulative)) + geom_line() + geom_point(shape = 1, size = 3) + theme_classic() + scale_y_continuous(breaks = seq(0, 1, by = 0.2))\n}\n\n\n\n#1.7) Function bin_variable()\n\n#' @title Binomial Random Variable Function\n#' @description find summary of variable and its distribution\n#' @param n number of trials (numeric)\n#' @param p success rate of each trials (numeric)\n#' @return a list with a list of trials and probs\n#' @export\n#' @examples\n#' bin_variable(trials = 5, prob = 0.5)\nbin_variable <- function(trials, prob) {\n  check_trials(trials)\n  check_prob(prob)\n  bin_var <- list(trials = trials, prob = prob)\n  class(bin_var) <- c(\"binvar\")\n  bin_var\n}\n\n#' @export\nprint.binvar <- function(x) {\n  cat('\"Binomial variable\"\\n\\n')\n  cat(\"Parameters\\n\")\n  cat(\"- number of trials:\", x$trials, \"\\n\")\n  cat(\"- prob of success :\", x$prob)\n}\n\n\n#' @export\nsummary.binvar <- function(x) {\n  trials <- x$trials\n  prob <- x$prob\n  summary_binvar <- list(trials = x$trials,\n                         prob = x$prob,\n                         mean = aux_mean(trials, prob),\n                         variance = aux_variance(trials, prob),\n                         mode = aux_mode(trials, prob),\n                         skewness = aux_skewness(trials, prob),\n                         kurtosis = aux_kurtosis(trials, prob))\n  class(summary_binvar) <- c(\"summary.binvar\", \"list\")\n  summary_binvar\n}\n\n#' @export\nprint.summary.binvar <- function(x) {\n  cat('\"Summary Binomial\"\\n\\n')\n  cat(\"Parameters\\n\")\n  cat(\"- number of trials:\", x$trials, \"\\n\")\n  cat(\"- prob of success :\", x$prob, \"\\n\\n\")\n  cat(\"Measures\\n\")\n  cat(\"- mean    :\", x$mean, \"\\n\")\n  cat(\"- variance:\", x$variance, \"\\n\")\n  cat(\"- mode    :\", x$mode, \"\\n\")\n  cat(\"- skewness:\", x$skewness, \"\\n\")\n  cat(\"- kurtosis:\", x$kurtosis)\n}\n\n\n\n\n#1.8) Functions of measures\n\n#' @title Binomial Mean\n#' @description Calculates the mean of a binomial variable\n#' @param n number of trials (numeric)\n#' @param p success rate of each trials (numeric)\n#' @return Expected value of binomial distribution\n#' @export\n#' @examples\n#' bin_mean(trials = 5, prob = 0.5)\nbin_mean <- function(trials, prob) {\n  check_trials(trials)\n  check_prob(prob)\n  return(aux_mean(trials, prob))\n}\n\n#' @title Binomial Variance\n#' @description Calculates the variance of a binomial variable\n#' @param n number of trials (numeric)\n#' @param p success rate of each trials (numeric)\n#' @return Return the variance of binomial distribution\n#' @export\n#' @examples\n#' bin_variance(trials = 5, prob = 0.5)\nbin_variance <- function(trials, prob) {\n  check_trials(trials)\n  check_prob(prob)\n  return(aux_variance(trials, prob))\n}\n\n#' @title Binomial Mode\n#' @description Calculates the mode of a binomial variable\n#' @param n number of trials (numeric)\n#' @param p success rate of each trials (numeric)\n#' @return Return the mode of binomial distribution\n#' @export\n#' @examples\n#' bin_mode(trials = 5, prob = 0.5)\nbin_mode <- function(trials, prob) {\n  check_trials(trials)\n  check_prob(prob)\n  return(aux_mode(trials, prob))\n}\n\n#' @title Binomial Skewness\n#' @description Calculates the skewness of a binomial variable\n#' @param n number of trials (numeric)\n#' @param p success rate of each trials (numeric)\n#' @return Return the skewness of binomial distribution\n#' @export\n#' @examples\n#' bin_skewness(trials = 5, prob = 0.5)\nbin_skewness <- function(trials, prob) {\n  check_trials(trials)\n  check_prob(prob)\n  return(aux_skewness(trials, prob))\n}\n\n#' @title Binomial Kurtosis\n#' @description Calculates the kurtosis of a binomial variable\n#' @param n number of trials (numeric)\n#' @param p success rate of each trials (numeric)\n#' @return Return the kurtosis of binomial distribution\n#' @export\n#' @examples\n#' bin_kurtosis(trials = 5, prob = 0.5)\nbin_kurtosis <- function(trials, prob) {\n  check_trials(trials)\n  check_prob(prob)\n  return(aux_kurtosis(trials, prob))\n}\n\n\n",
    "created" : 1556764985528.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3787586408",
    "id" : "4F024E89",
    "lastKnownWriteTime" : 1556844067,
    "last_content_update" : 1556844067408,
    "path" : "~/Desktop/Spring2019/133/package/binomial/R/main-functions.R",
    "project_path" : "R/main-functions.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}